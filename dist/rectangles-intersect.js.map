{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "node_modules/check-point-in-rectangle/check-point-in-rectangle.js",
    "node_modules/line-segments-intersect/line-segments-intersect.js",
    "rectangles-intersect.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "// check-point-in-rectangle.js\n// check point intersects with rectangle\n// http://martin-thoma.com/how-to-check-if-a-point-is-inside-a-rectangle/\nfunction pointInRect(pt,rect,precision) {\n  var p = precision || 6;\n  var rectArea = 0.5*Math.abs(\n    (rect[0][1] - rect[2][1]) * (rect[3][0] - rect[1][0])\n    + (rect[1][1] - rect[3][1]) * (rect[0][0] - rect[2][0])\n  );\n  var triangleArea = rect.reduce(function(prev,cur, i, arr) {\n    var j = i == arr.length-1 ? 0 : i+1;\n    return prev + 0.5*Math.abs(\n      pt[0] * (arr[i][1] - arr[j][1])\n      + arr[i][0] * (arr[j][1] - pt[1])\n      + arr[j][0] * (pt[1] - arr[i][1])\n    );\n  }, 0);\n  return fix(triangleArea,p) == fix(rectArea,p);\n}\n// fix to the precision\nfunction fix(n,p) {\n  return parseInt(n * Math.pow(10,p));\n};\n\nmodule.exports = pointInRect;\n",
    "// line-segments-intersect.js \n// intersection point https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection\n// line 1: x1,y1,x2,y2\n// line 2: x3,y3,x4,y4\n// for comparing the float number, fixing the number to int to required \n// precision\nfunction linesIntersect(seg1, seg2, precision) {\n  var x1 = seg1[0][0],\n    y1 = seg1[0][1],\n    x2 = seg1[1][0],\n    y2 = seg1[1][1],\n    x3 = seg2[0][0],\n    y3 = seg2[0][1],\n    x4 = seg2[1][0],\n    y4 = seg2[1][1],\n    intPt,x,y,result = false, \n    p = precision || 6,\n    denominator = (x1 - x2)*(y3 - y4) - (y1 -y2)*(x3 - x4);\n  if (denominator == 0) {\n    // check both segments are Coincident, we already know \n    // that these two are parallel \n    if (fix((y3 - y1)*(x2 - x1),p) == fix((y2 -y1)*(x3 - x1),p)) {\n      // second segment any end point lies on first segment\n      result = intPtOnSegment(x3,y3,x1,y1,x2,y2,p) ||\n        intPtOnSegment(x4,y4,x1,y1,x2,y2,p);\n    }\n  } else {\n    x = ((x1*y2 - y1*x2)*(x3 - x4) - (x1 - x2)*(x3*y4 - y3*x4))/denominator;\n    y = ((x1*y2 - y1*x2)*(y3 - y4) - (y1 - y2)*(x3*y4 - y3*x4))/denominator;\n    // check int point (x,y) lies on both segment \n    result = intPtOnSegment(x,y,x1,y1,x2,y2,p) \n      && intPtOnSegment(x,y,x3,y3,x4,y4,p);\n  }\n  return result;\n} \n\nfunction intPtOnSegment(x,y,x1,y1,x2,y2,p) {\n  return fix(Math.min(x1,x2),p) <= fix(x,p) && fix(x,p) <= fix(Math.max(x1,x2),p) \n    && fix(Math.min(y1,y2),p) <= fix(y,p) && fix(y,p) <= fix(Math.max(y1,y2),p); \n}\n\n// fix to the precision\nfunction fix(n,p) {\n  return parseInt(n * Math.pow(10,p));\n}\n\nmodule.exports = linesIntersect;\n",
    "// rectangles-intersect.js\n// two rectangles (non aligned to axis) intersects or not\nvar linesIntersect = require('line-segments-intersect'),\n  pointInside = require('check-point-in-rectangle');\n\nfunction intersects(rect1,rect2) {\n  var intersect = rect1.some(function(pt1,i,r1) {\n    //check intersection of any seg or rect1 to any seg of rect2\n    var j = i == r1.length-1 ? 0 : i+1;\n    return rect2.some(function(pt2,k,r2) {\n      var l = k == r2.length-1 ? 0 : k+1;\n      return linesIntersect([r1[i], r1[j]], [r2[k], r2[l]]);\n    });\n  });\n  if(!intersect) {\n    // check one rectangle contains another\n    intersect = rect2.some(function(pt) {\n      return pointInside(pt, rect1);\n    }) ||\n    rect1.some(function(pt) {\n      return pointInside(pt, rect2);\n    });\n  }\n  return intersect;\n}\n\nmodule.exports = intersects;\n"
  ]
}